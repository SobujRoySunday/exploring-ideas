generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Users Models
enum UserRoles {
  ADMIN
  EDUCATOR
  STUDENT
}

model Users {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String    @unique
  password String
  role     UserRoles @default(STUDENT)

  isVerified  Boolean  @default(false)
  isCreatedAt DateTime @default(now())
  isUpdatedAt DateTime @updatedAt

  forgotPasswordToken       String @default("")
  verifyToken               String @default("")
  forgotPasswordTokenExpiry Int    @default(0)
  verifyTokenExpiry         Int    @default(0)

  @@map("users")
}

// Content Model
enum PoleAnswer {
  YES
  NO
}

model Modules {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  moduleName  String     @unique
  isCreatedAt DateTime   @default(now())
  isUpdatedAt DateTime   @updatedAt
  Chapters    Chapters[]

  @@map("modules")
}

model Chapters {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  chapterName String
  moduleId    String   @db.ObjectId
  isCreatedAt DateTime @default(now())
  isUpdatedAt DateTime @updatedAt
  Videos      Videos[]

  moduleRelation Modules @relation(fields: [moduleId], references: [id])

  @@map("chapters")
}

model Videos {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  videoName   String
  chapterId   String   @db.ObjectId
  pptFile     String
  isCreatedAt DateTime @default(now())
  isUpdatedAt DateTime @updatedAt

  chapterRelation Chapters @relation(fields: [chapterId], references: [id])
  Polls           Polls[]

  @@map("videos")
}

model Polls {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  statement     String
  answer        PoleAnswer
  videoId       String     @db.ObjectId
  videoRelation Videos     @relation(fields: [videoId], references: [id])
  timestamp     Int
}
